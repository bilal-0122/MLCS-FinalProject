# -*- coding: utf-8 -*-
"""MLCS-Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nrx0LcU72Ev-Z6vdzBVc--gbtH_iFf_R
"""

!pip install tensorflow

!pip install tensorflow-gpu

!pip install librosa

!pip install -q keras

import librosa

import os

import json
import tensorflow as tf
from tensorflow import keras

from google.colab import drive
drive.mount('/content/drive')

DATASET_PATH = "/content/drive/My Drive/Colab Notebooks/dataset"

JSON_PATH = "/content/drive/My Drive/data.json"

SAMPLES_TO_CONSIDER = 2935

def preprocess_dataset(dataset_path, json_path, num_mfcc=13, n_fft=2048, hop_length=512):
    data = {
        "mapping": [],
        "labels": [],
        "MFCCs": [],
        "files": []
    }

    # loop through all sub-dirs
    for i, (dirpath, dirnames, filenames) in enumerate(os.walk(dataset_path)):

        # ensure we're at sub-folder level
        if dirpath is not dataset_path:

            # save label (i.e., sub-folder name) in the mapping
            label = dirpath.split("/")[-1]
            data["mapping"].append(label)
            print("\nProcessing: '{}'".format(label))

            for f in filenames:
                file_path = os.path.join(dirpath, f)

                signal, sample_rate = librosa.load(file_path)

                if len(signal) >= SAMPLES_TO_CONSIDER:

                    signal = signal[:SAMPLES_TO_CONSIDER]

                    # extract MFCCs
                    MFCCs = librosa.feature.mfcc(signal, sample_rate, n_mfcc=num_mfcc, n_fft=n_fft,
                                                 hop_length=hop_length)

                    data["MFCCs"].append(MFCCs.T.tolist())
                    data["labels"].append(i-1)
                    data["files"].append(file_path)
                    print("{}: {}".format(file_path, i-1))

    # save data in json file
    with open(json_path, "w") as fp:
        json.dump(data, fp, indent=4)


if __name__ == "__main__":
    preprocess_dataset(DATASET_PATH, JSON_PATH)

import numpy as np
import json
!pip install keras

import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split

!pip install --upgrade git+git://github.com/fchollet/keras.git

DATA_PATH = "/content/drive/My Drive/data.json"
SAVED_MODEL_PATH = "/content/drive/My Drive/Colab Notebooks/model.h5"
EPOCHS = 20
BATCH_SIZE = 16
PATIENCE = 5
LEARNING_RATE = 0.0001

def load_data(data_path):
  with open(data_path, "r") as fp:
    data = json.load(fp)

  X = np.array(data["MFCCs"])
  y = np.array(data["labels"])
  print("Training sets loaded!")
  return X, y

def prepare_dataset(data_path, test_size=0.2, validation_size=0.2):
  #load dataset
  X, y = load_data(data_path)

  #train, validation, test split created
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)
  X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=validation_size)

  X_train = X_train[..., np.newaxis]
  X_test = X_test[..., np.newaxis]
  X_validation = X_validation[..., np.newaxis]

  return X_train, y_train, X_validation, y_validation, X_test, y_test

def build_model(input_shape, loss="sparse_categorical_crossentropy", learning_rate=0.0001):
  
  #build neural network using Keras
  model = tf.keras.models.Sequential() #Convolutional network architecture

  # 1st layer
  model.add(tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape,
                                     kernel_regularizer=tf.keras.regularizers.l2(0.001)))
  model.add(tf.keras.layers.BatchNormalization())

  # 2nd layer
  model.add(tf.keras.layers.Conv2D(16, (3, 3), activation='relu',
                                     kernel_regularizer=tf.keras.regularizers.l2(0.001)))
  model.add(tf.keras.layers.BatchNormalization())

  # 3rd layer
  model.add(tf.keras.layers.Conv2D(16, (2, 2), activation='relu',
                                     kernel_regularizer=tf.keras.regularizers.l2(0.001)))
  model.add(tf.keras.layers.BatchNormalization())

  #Feed flattened output to dense layer
  model.add(tf.keras.layers.Flatten())
  model.add(tf.keras.layers.Dense(30, activation='relu'))
  tf.keras.layers.Dropout(0.3)
  
  model.add(tf.keras.layers.Dense(10, activation='softmax'))

  optimiser = tf.optimizers.Adam(learning_rate=learning_rate)

  #compile model
  model.compile(optimizer=optimiser,
                loss=loss,
                metrics=["accuracy"])

  model.summary()
  return model

# train model
  history = model.fit(X_train,
                        y_train,
                        epochs=epochs,
                        batch_size=batch_size,
                        validation_data=(X_validation, y_validation),
                        callbacks=[earlystop_callback])
  return history


def plot_history(history):

  fig, axs = plt.subplots(2)

  # create accuracy subplot
  axs[0].plot(history.history["accuracy"], label="accuracy")
  axs[0].plot(history.history['val_accuracy'], label="val_accuracy")
  axs[0].set_ylabel("Accuracy")
  axs[0].legend(loc="lower right")
  axs[0].set_title("Accuracy evaluation")

  # create loss subplot
  axs[1].plot(history.history["loss"], label="loss")
  axs[1].plot(history.history['val_loss'], label="val_loss")
  axs[1].set_xlabel("Epoch")
  axs[1].set_ylabel("Loss")
  axs[1].legend(loc="upper right")
  axs[1].set_title("Loss evaluation")

  plt.show()


def main():
  # generate train, validation and test sets
  X_train, y_train, X_validation, y_validation, X_test, y_test = prepare_dataset(DATA_PATH)

  # create network
  input_shape = (X_train.shape[1], X_train.shape[2], 1)
  model = build_model(input_shape, learning_rate=LEARNING_RATE)

  # train network
  history = train(model, EPOCHS, BATCH_SIZE, PATIENCE, X_train, y_train, X_validation, y_validation)

  # plot accuracy/loss for training/validation set as a function of the epochs
  plot_history(history)

  # evaluate network on test set
  test_loss, test_acc = model.evaluate(X_test, y_test)
  print("\nTest loss: {}, test accuracy: {}".format(test_loss, 100*test_acc))

  # save model
  model.save(SAVED_MODEL_PATH)

if __name__ == "__main__":
  main()

